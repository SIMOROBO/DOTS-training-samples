#pragma kernel CSInitialize
#pragma kernel CSFixedUpdate
#pragma kernel CSUpdate
#pragma enable_d3d11_debug_symbols

#define Kernel_X 8
#define Kernel_Y 8
#define Kernel_Z 8

struct FixedUpdateData
{
	float3 position;
	float3 color;
	float3 velocity;
};

RWStructuredBuffer<float4x4> TransformsBuffer;
RWStructuredBuffer<FixedUpdateData> FixedUpdateBuffer;

uint gInstancesCount;
uint gInstancesPerRow;
float gTime;
#define PI 3.1415926535897932384626433

[numthreads(Kernel_X, Kernel_Y, Kernel_Z)]
void CSFixedUpdate (	uint3 groupId : SV_GroupID,
	uint3 groupThreadId : SV_GroupThreadID,
	uint3 dispatchThreadId : SV_DispatchThreadID,
	uint groupIndex : SV_GroupIndex)
	{
		uint groupSize = Kernel_X * Kernel_Y * Kernel_Z;
		uint threadGroupIndex = (groupId.x * (groupSize * 16)) + groupId.y * (groupSize * 4) + (groupId.z * groupSize); // 32768
		uint index = threadGroupIndex + groupIndex;

		FixedUpdateData data;
		data.position = float3(1,2,3);
		data.color = float3(1,0,0);
		data.velocity = float3(0,0,0);
		FixedUpdateBuffer[index] = data;
	}

[numthreads(Kernel_X, Kernel_Y, Kernel_Z)]
void CSUpdate (
	uint3 groupId : SV_GroupID,
	uint3 groupThreadId : SV_GroupThreadID,
	uint3 dispatchThreadId : SV_DispatchThreadID,
	uint groupIndex : SV_GroupIndex)
{
	uint groupSize = Kernel_X * Kernel_Y * Kernel_Z;
	uint threadGroupIndex = (groupId.x * (groupSize * 16)) + groupId.y * (groupSize * 4) + (groupId.z * groupSize); // 32768
	uint index = threadGroupIndex + groupIndex;
	float3 color = FixedUpdateBuffer[index].color;

	TransformsBuffer[index][3] =float4(color, 1);
}

[numthreads(Kernel_X, Kernel_Y, Kernel_Z)]
void CSInitialize (
	uint3 groupId : SV_GroupID,
	uint3 groupThreadId : SV_GroupThreadID,
	uint3 dispatchThreadId : SV_DispatchThreadID,
	uint groupIndex : SV_GroupIndex)
{
	uint groupSize = Kernel_X * Kernel_Y * Kernel_Z;
	//uint threadGroupIndex = (groupId.x * (groupSize * 4)) + groupId.y * (groupSize *2)+ (groupId.z * groupSize);  // 4096
	uint threadGroupIndex = (groupId.x * (groupSize * 16)) + groupId.y * (groupSize * 4) + (groupId.z * groupSize); // 32768
	uint index = threadGroupIndex + groupIndex;
	uint3 groupOffset = uint3((groupId.x * (Kernel_X )), groupId.y * (Kernel_X * 1), (groupId.z * Kernel_X));
	float cosTime = cos(gTime);
	float spacing = 4 * ((cosTime+1)*.5);

	float3 pos = float3(dispatchThreadId.x * spacing, dispatchThreadId.y * spacing, dispatchThreadId.z * spacing);
	float3 color = FixedUpdateBuffer[index].color;

	TransformsBuffer[index] =
		float4x4(
			float4(1, 0, 0, pos.x),
			float4(0, 1, 0, pos.y),
			float4(0, 0, 1, pos.z),
			float4(0, 0, 0, 1)
			);
}
