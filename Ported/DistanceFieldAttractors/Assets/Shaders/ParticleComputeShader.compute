#pragma kernel CSInitialize
#pragma kernel CSFixedUpdate0
#pragma kernel CSFixedUpdate1
#pragma kernel CSFixedUpdate2
#pragma kernel CSFixedUpdate3
#pragma kernel CSFixedUpdate4
#pragma kernel CSFixedUpdate5
#pragma kernel CSUpdate
//#pragma enable_d3d11_debug_symbols

#include "CommonParticleComputeShader.compute"
#include "SimulationMetaballs.compute"
#include "SimulationSpinMixer.compute"

[numthreads(KERNEL_SIZE, KERNEL_SIZE, KERNEL_SIZE)]
void CSInitialize (
    uint3 groupId : SV_GroupID,
    uint3 groupThreadId : SV_GroupThreadID,
    uint3 dispatchThreadId : SV_DispatchThreadID,
    uint groupIndex : SV_GroupIndex)
{
    uint index = GetParticleIndex(groupId, groupIndex);
    float3 pos = rand_dir(float2(index, gTime)) * rand_float(float2(index, gTime + 1.0f)) * 100.0f;
    float3 color = FixedUpdateBuffer[index].color;

    TransformsBuffer[index] =
    float4x4(
    float4(1, 0, 0, pos.x),
    float4(0, 1, 0, pos.y),
    float4(0, 0, 1, pos.z),
    float4(0, 0, 0, 1)
    );

    FixedUpdateData data;
    data.position = pos;
    data.color = float3(1, 1, 1);
    data.velocity = float3(0, 0, 0);
    FixedUpdateBuffer[index] = data;
}

[numthreads(KERNEL_SIZE, KERNEL_SIZE, KERNEL_SIZE)]
void CSFixedUpdate0 (
    uint3 groupId : SV_GroupID,
    uint3 groupThreadId : SV_GroupThreadID,
    uint groupIndex : SV_GroupIndex)
{
    uint index = GetParticleIndex(groupId, groupIndex);
    float3 pos = FixedUpdateBuffer[index].position;
    SimOutput simOutput = SimulationMetaballs(pos);
    FixedUpdateBuffer[index] = ComputeParticleData(index, simOutput.normal, simOutput.dist);
}

[numthreads(KERNEL_SIZE, KERNEL_SIZE, KERNEL_SIZE)]
void CSFixedUpdate1(
    uint3 groupId : SV_GroupID,
    uint3 groupThreadId : SV_GroupThreadID,
    uint groupIndex : SV_GroupIndex)
{
    uint index = GetParticleIndex(groupId, groupIndex);
    float3 pos = FixedUpdateBuffer[index].position;
    SimOutput simOutput = SpinMixerJob(pos);
    FixedUpdateBuffer[index] = ComputeParticleData(index, simOutput.normal, simOutput.dist);
}

[numthreads(KERNEL_SIZE, KERNEL_SIZE, KERNEL_SIZE)]
void CSFixedUpdate2(
    uint3 groupId : SV_GroupID,
    uint3 groupThreadId : SV_GroupThreadID,
    uint groupIndex : SV_GroupIndex)
{
    // SpherePlane simulation
}

[numthreads(KERNEL_SIZE, KERNEL_SIZE, KERNEL_SIZE)]
void CSFixedUpdate3(
    uint3 groupId : SV_GroupID,
    uint3 groupThreadId : SV_GroupThreadID,
    uint groupIndex : SV_GroupIndex)
{
    // SphereField simulation
}

[numthreads(KERNEL_SIZE, KERNEL_SIZE, KERNEL_SIZE)]
void CSFixedUpdate4(
    uint3 groupId : SV_GroupID,
    uint3 groupThreadId : SV_GroupThreadID,
    uint groupIndex : SV_GroupIndex)
{
    // FigureEight simulation
}

[numthreads(KERNEL_SIZE, KERNEL_SIZE, KERNEL_SIZE)]
void CSFixedUpdate5(
    uint3 groupId : SV_GroupID,
    uint3 groupThreadId : SV_GroupThreadID,
    uint groupIndex : SV_GroupIndex)
{
    // PerlinNoise simulation
}

[numthreads(KERNEL_SIZE, KERNEL_SIZE, KERNEL_SIZE)]
void CSUpdate (
    uint3 groupId : SV_GroupID,
    uint3 groupThreadId : SV_GroupThreadID,
    uint groupIndex : SV_GroupIndex)
{
    uint index = GetParticleIndex(groupId, groupIndex);
    FixedUpdateData data = FixedUpdateBuffer[index];
    float3 position = data.position;
    float3 velocity = data.velocity;
    float3 color = data.color;

    float3 velocityNormalized = normalize(velocity);
    float velocityLength = dot(velocity, velocityNormalized);
    float3 scale = float3(0.01f, 0.1f, max(0.1f, velocityLength * gSpeedStretch));
    scale = 1.0f;

    TransformsBuffer[index] = LookAtTRSC(position, velocityNormalized, scale, color);
}
